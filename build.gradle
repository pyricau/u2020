buildscript {
  repositories {
    //maven {
    //  url 'https://oss.sonatype.org/content/repositories/snapshots/'
    //}
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.2.3'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
  }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
  //maven {
  //  url 'https://oss.sonatype.org/content/repositories/snapshots/'
  //}
  mavenCentral()
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
  compileSdkVersion 22
  buildToolsVersion '22.0.1'

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isTravis
  }

  signingConfigs {
    u2020 {
      storeFile file('u2020.keystore')
      storePassword 'android'
      keyAlias 'android'
      keyPassword 'android'
    }
  }

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 22

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    signingConfig signingConfigs.u2020

    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

    testInstrumentationRunner "com.jakewharton.u2020.U2020TestRunner"
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
    }
  }

  productFlavors {
    internal {
      applicationId 'com.jakewharton.u2020.internal'
    }
    production {
      applicationId 'com.jakewharton.u2020'
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'LICENSE.txt'
  }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
  internalDebugCompile

  all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'com.android.support') {
        // The support test libraries depend on an older version of the support annotations. In
        // order to avoid NoClassDefFoundError being thrown we force all versions to the latest.
        // Additionally, Espresso has a dependency on an old version of recyclerview-v7 which, for
        // whatever reason, trumps the newer version and causes crashes.
        // TODO remove when test support libraries depend on latest released support-annotations.
        // TODO remove when Espresso depends on the latest released recyclerview-v7.
        details.useVersion '22.1.1'
      } else if (details.requested.group == 'org.hamcrest') {
        // Espresso v2.1 depends on hamcrest-integration and hamcrest-core v1.1. The JUnit override
        // below has a transitive dependency to hamcrest-core v1.3 which contains classes previously
        // in hamcrest-integration but without its version going to v1.3 we get duplicate classes.
        // TODO remove when Espresso depends on JUnit 4.12.
        details.useVersion '1.3'
      } else if (details.requested.name == 'junit-dep') {
        // The support test runner depends on an old version of junit (4.10) named junit-dep. We want
        // to use a newer version which is no longer uses this naming. Force all versions to use the
        // same artifactId naming and let normal version conflict resolution semantics apply.
        // TODO remove when Espresso depends on JUnit 4.12.
        details.useTarget group: 'junit', name: 'junit', version: details.requested.version
      }
    }
  }
}

dependencies {
  compile 'com.android.support:support-v4:22.1.1'
  compile 'com.android.support:support-annotations:22.1.1'
  compile 'com.android.support:appcompat-v7:22.1.1'
  compile 'com.android.support:recyclerview-v7:22.1.1'

  compile 'com.squareup.dagger:dagger:1.2.2'
  apt 'com.squareup.dagger:dagger-compiler:1.2.2'

  compile 'com.squareup.okhttp:okhttp:2.3.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  internalDebugCompile 'com.squareup.retrofit:retrofit-mock:1.9.0'

  compile 'com.jakewharton:butterknife:6.1.0'
  compile 'com.jakewharton.timber:timber:3.0.2'
  compile 'com.jakewharton.byteunits:byteunits:0.9.0'
  internalDebugCompile 'com.jakewharton.madge:madge:1.1.1'
  internalDebugCompile 'com.jakewharton.scalpel:scalpel:1.1.1'

  compile 'io.reactivex:rxjava:1.0.10'
  compile 'io.reactivex:rxandroid:0.24.0'

  compile 'net.danlew:android.joda:2.7.1'
  internalCompile 'com.mattprecious.telescope:telescope:1.4.0@aar'

  androidTestCompile 'junit:junit:4.12'
  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'
  androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.1'
  androidTestCompile 'com.android.support.test:runner:0.2'
  androidTestCompile 'com.android.support.test:rules:0.2'
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
  installAll.dependsOn(variant.install)
  // Ensure we end up in the same group as the other install tasks.
  installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
  tasks.getByName('assemble').dependsOn variant.assemble
}
